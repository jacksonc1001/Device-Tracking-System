@** Author: Jackson
    * Date: 21/05/2021
    * Version: 1.0.0.0
    * Objective: Split GridView Partial View*@

@model IEnumerable<Device_Tracking_System.Models.DisplayDeviceInfo>

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridView";
        settings.CallbackRouteValues = new { Controller = "Split", Action = "GridViewPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Split", Action = "GridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Split", Action = "GridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Split", Action = "GridViewPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsEditing.BatchEditSettings.ShowConfirmOnLosingChanges = true;
        settings.Styles.BatchEditModifiedCell.BackColor = System.Drawing.Color.Yellow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

        settings.SettingsPager.PageSize = 15;
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
        settings.Settings.VerticalScrollableHeight = 270;
        settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.Bottom;
        settings.Settings.ShowFooter = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = false;
        settings.CommandColumn.ShowEditButton = false;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.AllPages;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.Width = System.Web.UI.WebControls.Unit.Pixel(65);
        settings.CommandColumn.ShowClearFilterButton = true;

        settings.KeyFieldName = "DeviceId";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = false;
        settings.ClientSideEvents.BeginCallback = "OnBeginCallback";
        settings.ClientSideEvents.SelectionChanged = "OnSelectionChanged";

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Left;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 600;
        settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Count, "DeviceId");

        settings.Columns.Add("DeviceId");
        settings.Columns.Add("AliasId");
        settings.Columns.Add(sSubstrateId =>
        {
            sSubstrateId.FieldName = "SourceSubstrateId";
            sSubstrateId.Width = 100;
        });
        settings.Columns.Add(tSubstrateId =>
        {
            tSubstrateId.FieldName = "TargetSubstrateId";
            tSubstrateId.Width = 100;
        });
        settings.Columns.Add(sPositionId =>
        {
            sPositionId.FieldName = "SourcePositionId";
            sPositionId.Width = 80;
        });
        settings.Columns.Add(tPositionId =>
        {
            tPositionId.FieldName = "TargetPositionId";
            tPositionId.Width = 80;
        });
        settings.Columns.Add(fromX =>
        {
            fromX.FieldName = "FromX";
            fromX.Width = 64;
        });
        settings.Columns.Add(fromY =>
        {
            fromY.FieldName = "FromY";
            fromY.Width = 64;
        });
        settings.Columns.Add(toX =>
        {
            toX.FieldName = "ToX";
            toX.Width = 64;
        });
        settings.Columns.Add(toY =>
        {
            toY.FieldName = "ToY";
            toY.Width = 64;
        });
        settings.Columns.Add(binResult =>
        {
            binResult.FieldName = "BinResultID";
            binResult.Width = 80;
            binResult.Caption = "Bin Result";
            binResult.EditorProperties().ComboBox(c =>
            {
                c.TextField = "BinResultName";
                c.ValueField = "BinResultID";
                c.ValueType = typeof(int);
                c.DataSource = Device_Tracking_System.Controllers.UpdateController.GetBinResultList();
            });
        });
        settings.Columns.Add(binCode =>
        {
            binCode.FieldName = "BinCode";
            binCode.Width = 70;
        });
        settings.Columns.Add(binDesc =>
        {
            binDesc.FieldName = "BinDesc";
            binDesc.Width = 90;
        });
        settings.AutoFilterCellEditorInitialize = (s, e) =>
        {
            if (e.Column.FieldName == "BinResultID")
            {
                ((ASPxComboBox)e.Editor).Items.RemoveAt(0);
            }
        };
    });
}
@grid.Bind(Model).GetHtml()
